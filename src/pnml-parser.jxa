
(ns xmlElement
    (use joxa-records))

(defrecord+ name expanded-name nsinfo namespace parents pos
	                  attributes content language xmlbase elementdef)

(ns xmlAttribute
    (use joxa-records))

(defrecord+ name expanded-name nsinfo namespace parents pos language value normalized)


(ns xmlText
    (use joxa-records))

(defrecord+ parents pos language value type)


(ns pnml-parser
    (require dict io lists 
	     (erlang :as erl)
	     (xmlElement :as xml-elem)
	     (xmlAttribute :as xml-attr)
	     (xmlText :as xml-text)
	     (xmerl_scan :as xml)
	     (xmerl_xpath :as xpath)
	     (joxa-core :as jxc)
	     (joxa-lists :as jxl)))


(defn attr-value-by-name (name attrs)
  (xml-attr/value 
   (jxl/hd
    (lists/dropwhile (fn (attr) (erl/not (erl/== (xml-attr/name attr) name))) attrs))))

(defn decode-vars (nodes)
  "Reads in the relevant parts of the variable element."
  (lists/map (fn (n) (xml-text/value (jxl/hd (xml-elem/content n)))) nodes))


(defn parse-transition-code (xml-ts)
  "Parse the transition node including the code snippet."
  (let* (in-vars (decode-vars (xpath/string "inputs/variable" xml-ts))
	 out-vars (decode-vars (xpath/string "outputs/variable" xml-ts))
	 code-string (xml-text/value (jxl/hd (xpath/string "code/text()" xml-ts))))
    {in-vars out-vars code-string}))


(defn find-flow-toolspecifics (xml-ts)
  "Find all <toolspecific> elements that have tool=\"flow-1\"."
  (lists/filter
   (fn (ts) (erl/== "flow-1" (attr-value-by-name 'tool (xml-elem/attributes ts)))) xml-ts))
	

(defn construct-transition (elem)
  "Parse the transition id, input variables, output variables and code snippet."
  (let* (desc (xml-text/value (jxl/hd (xpath/string "name/text/child::text()" elem)))
	 id   (attr-value-by-name 'id (xml-elem/attributes elem)))
    (case (find-flow-toolspecifics (xpath/string "toolspecific" elem))
	  ([] {:transition id desc []})
	  ([xml-ts] {:transition id desc (parse-transition-code xml-ts)}))))


(defn construct-arc (elem)
  "Given the arc xml element, construct the arc representation"
  (let* (attr (xml-elem/attributes elem)
	 id (attr-value-by-name 'id attr)
	 src (attr-value-by-name 'source attr)
	 tgt (attr-value-by-name 'target attr))
    {'arc id src tgt}))
	 

(defn construct-place (elem)
  "Construct a place (only id and description is parsed)"
  (let* (id (attr-value-by-name 'id (xml-elem/attributes elem))
	 desc (xml-text/value (jxl/hd (xpath/string "name/text/child::text()" elem))))
    {'place id desc}))


(defn+ parse (file-name)
  "Parse the definition of the petri net."
  (jxc/let ({xml-data _rest} (xml/file file-name))
     (let* (places (lists/map construct-place/1 (xpath/string "/pnml/net/place" xml-data))
	    trans (lists/map construct-transition/1 (xpath/string "/pnml/net/transition" xml-data))
	    arcs (lists/map construct-arc/1 (xpath/string "/pnml/net/arc" xml-data)))
       {'ptnet places trans arcs})))


(defn+ test ()
  (pnml-parser/parse "/home/martin/.WoPeD-3.1.0/nets/wrf-job-test.pnml"))

